<?php
/**
 * @file
 * Basic settings for feed import base module
 */

/**
 * This is path to feed import UI
 */
define('FEED_IMPORT_PATH', 'admin/config/services/feed_import');

/**
 * Implements hook_permision().
 */
function feed_import_base_permission() {
  return array(
    'feed import' => array(
      'title' => t('Administer feed import settings'),
      'description' => t('Change settings for feed import'),
    ),
    'feed import process' => array(
      'title' => t('Run feed import'),
      'description' => t('Import a feed'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function feed_import_base_menu() {
  // FEED_IMPORT_PATH is defined at the top of this file.
  // This is used for arguments to know the position.
  $items = array();
  $items[FEED_IMPORT_PATH . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manages feed import global settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feed_import_base_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('feed import'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 10,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function feed_import_base_cron() {
  // Check if cron import is enabled.
  if (variable_get('feed_import_use_cron', FALSE)) {
    $overlap = variable_get('feed_import_let_overlap', array());
    $running = variable_get('feed_import_import_running', array());
    // Check if we can import.
    if (_feed_import_base_cron_in_time()) {
      $feeds = array_filter(FeedImport::loadAllFeeds(), '_feed_import_base_feed_enabled');
      uasort($feeds, '_feed_import_base_sort_feeds');
      $to_import = NULL;
      foreach ($feeds as $name => $feed) {
        if (in_array($feed->entity, $overlap) ||
            empty($running[$feed->entity]) ||
            !in_array($name, $running[$feed->entity])) {
          $to_import = $feed;
          break;
        }
      }
      unset($feeds, $feed);
      if ($to_import) {
        _feed_import_base_process_feed($feed);
        variable_set('feed_import_last_executed_import', REQUEST_TIME);
      }
    }
  }
  // Delete expired items.
  FeedImport::deleteExpired(variable_get('feed_import_delete_items_per_cron', 300));
}


/**
 * Imports a feed.
 */
function _feed_import_base_process_feed($feed, $recheck = FALSE) {
  $running = _feed_import_base_variable_get('feed_import_import_running', array());
  if ($recheck) {
    $overlap = variable_get('feed_import_let_overlap', array());
    if (!in_array($feed->entity, $overlap) &&
        !empty($running[$feed->entity]) &&
        in_array($feed->machine_name, $running[$feed->entity])
        ) {
      return FALSE;
    }
    unset($overlap);
  }

  $running[$feed->entity][] = $feed->machine_name;
  variable_set('feed_import_import_running', $running);
  unset($running);
  $report = FeedImport::import($feed, _feed_import_base_get_filters_dir());
  $feed->last_run = $report['started'];
  $d = $report['finished'] - $report['started'];
  $feed->last_run_duration = $d > 0 ? $d : 0;
  FeedImport::saveFeedImportStatus($feed);
  $running = _feed_import_base_variable_get('feed_import_import_running', array());
  if (!empty($running[$feed->entity]) &&
      ($pos = array_search($feed->machine_name, $running[$feed->entity])) !== FALSE) {
    unset($running[$pos]);
    variable_set('feed_import_import_running', $running);
  }
  // Save report if needed.
  if ($report && variable_get('feed_import_reports', TRUE)) {
    $report['feed'] = $feed;
    _feed_import_base_save_report($report, $feed);
  }
  return TRUE;
}

/**
 * Saves report in log.
 *
 * @param array $r
 *    Report array
 * @param object $feed
 *    Related feed
 */
function _feed_import_base_save_report($r, $feed) {
  $info = theme('table', array(
    'header' => array(
      t('Feed name'),
      t('Duration'),
      t('Found'),
      t('New'),
      t('Updated'),
      t('Rescheduled'),
      t('Skipped'),
      t('Missing entities'),
    ),
    'rows' => array(array(
      l($feed->name, FEED_IMPORT_PATH . '/edit/' . $feed->machine_name . '/feed'),
      gmdate('H:i:s', $r['finished'] - $r['started']) . '<br>' . format_date($r['started']) . ' - ' . format_date($r['finished']),
      $r['total'],
      $r['new'],
      $r['updated'],
      $r['rescheduled'],
      $r['skipped'],
      $r['missing'],
    )),
  ));

  $err = theme('table', array(
    'header' => array(t('Error'), t('Error number'), t('Line'), t('File')),
    'rows' => $r['errors'],
    'empty' => t('No errors reported'),
    'caption' => t('Errors'),
  ));


  watchdog('Feed Import', 'Feed @name imported !status Errors !errors', array(
    '@name' => $feed->name,
    '!status' => '<br>' . $info,
    '!errors' => '<br>' . $err,
  ), $r['errors'] ? WATCHDOG_WARNING : WATCHDOG_NOTICE);
}

/**
 * Gets a variable directly from table.
 * @see variable_get()
 */
function _feed_import_base_variable_get($name, $default = NULL) {
  $name = db_query('SELECT value FROM {variable} WHERE name=:name', array(
    ':name' => $name,
  ))->fetchColumn(0);
  if (!$name) {
    return $default;
  }
  return unserialize($name);
}

/**
 * Checks if a feed is enabled.
 */
function _feed_import_base_feed_enabled($feed) {
  return $feed->cron_import > 0;
}

/**
 * Sort callback for feeds.
 */
function _feed_import_base_sort_feeds($a, $b) {
  return $a->last_run - $b->last_run;
}

/**
 * Returns curent filters dir.
 */
function _feed_import_base_get_filters_dir() {
  if (($dir = variable_get('feed_import_filters_dir', FALSE)) === FALSE) {
    $dir = drupal_get_path('module', 'feed_import_base') . '/filters';
  }
  return $dir;
}

/**
 * Helper for cron.
 *
 * @return bool
 *    Cron can run
 */
function _feed_import_base_cron_in_time() {
  if (variable_get('feed_import_time_settings', 0)) {
    // Specified interval.
    $time1 = $time2 = 0;
    list($h, $m) = explode(':', variable_get('feed_import_interval_start', '00:00'));
    $time1 = mktime($h, $m, 0);
    list($h, $m) = explode(':', variable_get('feed_import_interval_stop', '00:00'));
    $time2 = mktime($h, $m, 0);
    return $time1 < $time2 && $time1 <= REQUEST_TIME && REQUEST_TIME <= $time2;
  }
  else {
    $last_executed = variable_get('feed_import_last_executed_import', 0);
    $time_between = variable_get('feed_import_time_between_imports', 3600);
    return ($last_executed + $time_between) < REQUEST_TIME;
  }
}

/**
 * Settings form
 */
function feed_import_base_settings_form($form, &$form_state) {
  $form['feed_import_reports'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('feed_import_reports', FALSE),
    '#title' => t('Provide import reports'),
  );
  $form['feed_import_use_cron'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('feed_import_use_cron', 0),
    '#title' => t('Cron import'),
    '#description' => t('Run import for enabled feeds at cron'),
  );
  $form['container'] = array(
    '#type' => 'fieldset',
    '#states' => array(
      'invisible' => array(
        'input[name="feed_import_use_cron"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['container']['feed_import_time_settings'] = array(
    '#type' => 'radios',
    '#options' => array(t('From time to time'), t('Specified time interval')),
    '#default_value' => variable_get('feed_import_time_settings', 0),
    '#title' => t('When feeds can be imported'),
  );
  $form['container']['feed_import_time_between_imports'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('feed_import_time_between_imports', 3600),
    '#title' => t('Time between two imports at cron (seconds)'),
    '#description' => t('Time betwen two cron imports.'),
    '#states' => array(
      'visible' => array(
        'input[name="feed_import_time_settings"]' => array('value' => 0),
      ),
    ),
  );
  $form['container']['feed_import_interval_start'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('feed_import_interval_start', '00:00'),
    '#title' => t('Start time'),
    '#description' => t('Format is hh:mm.'),
    '#states' => array(
      'visible' => array(
        'input[name="feed_import_time_settings"]' => array('value' => 1),
      ),
    ),
  );
  $form['container']['feed_import_interval_stop'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('feed_import_interval_stop', '24:00'),
    '#title' => t('End time'),
    '#description' => t('Format is hh:mm. This must be greater than start time.'),
    '#states' => array(
      'visible' => array(
        'input[name="feed_import_time_settings"]' => array('value' => 1),
      ),
    ),
  );
  $form['feed_import_delete_items_per_cron'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('feed_import_delete_items_per_cron', 300),
    '#title' => t('Expired items delete per cron'),
    '#description' => t('How many expired items to delete when cron runs.'),
    '#required' => TRUE,
  );

  $form['feed_import_filters_dir'] = array(
    '#type' => 'textfield',
    '#default_value' => _feed_import_base_get_filters_dir(),
    '#title' => t('Extra filters base path'),
    '#description' => t('Where to look for filter files.'),
  );

  $form['feed_import_let_overlap'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => FeedImport::getAllEntities(),
    '#default_value' => variable_get('feed_import_let_overlap', array()),
    '#title' => t('Allow import overlap for specified entities'),
    '#description' => t('This is not indicated for nodes.'),
  );

  return system_settings_form($form);
}

/**
 * Settings form validate
 */
function feed_import_base_settings_form_validate($form, &$form_state) {
  $numeric_fields = array(
    'feed_import_time_between_imports',
    'feed_import_delete_items_per_cron',
  );
  // Checking numeric fields.
  foreach ($numeric_fields as &$field) {
    if (!is_numeric($form_state['values'][$field])) {
      form_error($form[$field], t('Field value must be numeric.'));
    }
  }
  // Check interval.
  $ok = TRUE;
  if (!preg_match("/^[0-2][0-9]:[0-5][0-9]$/", $form_state['values']['feed_import_interval_start'])) {
    form_error($form['container']['feed_import_interval_start'], t('Invalid start time.'));
    $ok = FALSE;
  }
  if (!preg_match("/^[0-2][0-9]:[0-5][0-9]$/", $form_state['values']['feed_import_interval_stop'])) {
    form_error($form['container']['feed_import_interval_stop'], t('Invalid end time.'));
    $ok = FALSE;
  }
  if ($ok) {
    if ($form_state['values']['feed_import_interval_stop'] < $form_state['values']['feed_import_interval_start']) {
      form_error($form['container']['feed_import_interval_stop'], t('End time must be greater than start time.'));
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function feed_import_base_entity_delete($entity, $type) {
  $e = FeedImport::getEntityInfo($type);
  if (isset($entity->{$e->idKey})) {
    $id = $entity->{$e->idKey};
    $id && is_numeric($id) && FeedImport::addDeletedEntity($type, $id);
  }
}
